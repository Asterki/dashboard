/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PreferencesImport } from './routes/preferences'
import { Route as IndexImport } from './routes/index'
import { Route as VaultsIndexImport } from './routes/vaults/index'
import { Route as DemoStoreImport } from './routes/demo.store'
import { Route as VaultsVaultidIndexImport } from './routes/vaults/$vaultid/index'

// Create/Update Routes

const PreferencesRoute = PreferencesImport.update({
  id: '/preferences',
  path: '/preferences',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const VaultsIndexRoute = VaultsIndexImport.update({
  id: '/vaults/',
  path: '/vaults/',
  getParentRoute: () => rootRoute,
} as any)

const DemoStoreRoute = DemoStoreImport.update({
  id: '/demo/store',
  path: '/demo/store',
  getParentRoute: () => rootRoute,
} as any)

const VaultsVaultidIndexRoute = VaultsVaultidIndexImport.update({
  id: '/vaults/$vaultid/',
  path: '/vaults/$vaultid/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/preferences': {
      id: '/preferences'
      path: '/preferences'
      fullPath: '/preferences'
      preLoaderRoute: typeof PreferencesImport
      parentRoute: typeof rootRoute
    }
    '/demo/store': {
      id: '/demo/store'
      path: '/demo/store'
      fullPath: '/demo/store'
      preLoaderRoute: typeof DemoStoreImport
      parentRoute: typeof rootRoute
    }
    '/vaults/': {
      id: '/vaults/'
      path: '/vaults'
      fullPath: '/vaults'
      preLoaderRoute: typeof VaultsIndexImport
      parentRoute: typeof rootRoute
    }
    '/vaults/$vaultid/': {
      id: '/vaults/$vaultid/'
      path: '/vaults/$vaultid'
      fullPath: '/vaults/$vaultid'
      preLoaderRoute: typeof VaultsVaultidIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/preferences': typeof PreferencesRoute
  '/demo/store': typeof DemoStoreRoute
  '/vaults': typeof VaultsIndexRoute
  '/vaults/$vaultid': typeof VaultsVaultidIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/preferences': typeof PreferencesRoute
  '/demo/store': typeof DemoStoreRoute
  '/vaults': typeof VaultsIndexRoute
  '/vaults/$vaultid': typeof VaultsVaultidIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/preferences': typeof PreferencesRoute
  '/demo/store': typeof DemoStoreRoute
  '/vaults/': typeof VaultsIndexRoute
  '/vaults/$vaultid/': typeof VaultsVaultidIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/preferences'
    | '/demo/store'
    | '/vaults'
    | '/vaults/$vaultid'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/preferences' | '/demo/store' | '/vaults' | '/vaults/$vaultid'
  id:
    | '__root__'
    | '/'
    | '/preferences'
    | '/demo/store'
    | '/vaults/'
    | '/vaults/$vaultid/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PreferencesRoute: typeof PreferencesRoute
  DemoStoreRoute: typeof DemoStoreRoute
  VaultsIndexRoute: typeof VaultsIndexRoute
  VaultsVaultidIndexRoute: typeof VaultsVaultidIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PreferencesRoute: PreferencesRoute,
  DemoStoreRoute: DemoStoreRoute,
  VaultsIndexRoute: VaultsIndexRoute,
  VaultsVaultidIndexRoute: VaultsVaultidIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/preferences",
        "/demo/store",
        "/vaults/",
        "/vaults/$vaultid/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/preferences": {
      "filePath": "preferences.tsx"
    },
    "/demo/store": {
      "filePath": "demo.store.tsx"
    },
    "/vaults/": {
      "filePath": "vaults/index.tsx"
    },
    "/vaults/$vaultid/": {
      "filePath": "vaults/$vaultid/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
